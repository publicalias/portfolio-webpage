// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FriendList should call useRefresh on update 1`] = `
Array [
  Array [
    [MockFunction],
    0,
    Array [],
    Array [
      "FRIEND_ADD",
      "FRIEND_CONFIRM",
      "FRIEND_DISMISS",
      "FRIEND_REMOVE",
      "META_GET_USER",
    ],
  ],
  Array [
    [MockFunction],
    0,
    Array [],
    Array [
      "FRIEND_ADD",
      "FRIEND_CONFIRM",
      "FRIEND_DISMISS",
      "FRIEND_REMOVE",
      "META_GET_USER",
    ],
  ],
]
`;

exports[`FriendList should match snapshot (bool) 1`] = `
<MetaList
  actions={
    Object {
      "favoriteAdd": [MockFunction],
      "favoriteRemove": [MockFunction],
      "friendAdd": [MockFunction],
      "friendConfirm": [MockFunction],
      "friendDismiss": [MockFunction],
      "friendGetList": [MockFunction],
      "friendRemove": [MockFunction],
      "metaAddErrors": [MockFunction],
      "metaCloseError": [MockFunction],
      "metaGetUser": [MockFunction],
      "metaLogAction": [MockFunction],
      "metaNoOp": [MockFunction],
      "metaSaveAddress": [MockFunction],
      "metaSaveAvatar": [MockFunction],
      "metaSetAddress": [MockFunction],
      "metaSetAvatar": [MockFunction],
      "metaSetLoading": [MockFunction],
      "metaSetReady": [MockFunction],
      "metaSetState": [MockFunction],
      "metaTimeoutError": [MockFunction],
      "metaToggleDelete": [MockFunction],
      "metaToggleSettings": [MockFunction],
      "rsvpAdd": [MockFunction],
      "rsvpDismiss": [MockFunction],
      "rsvpGetList": [MockFunction],
      "rsvpRemove": [MockFunction],
      "userClearState": [MockFunction],
      "userGetItem": [MockFunction],
      "userGetList": [MockFunction],
      "userSetSearch": [MockFunction],
      "userToggleBlock": [MockFunction],
      "userToggleRange": [MockFunction],
      "venueClearForm": [MockFunction],
      "venueClearState": [MockFunction],
      "venueGetItem": [MockFunction],
      "venueGetList": [MockFunction],
      "venueSetMessage": [MockFunction],
      "venueSetOpen": [MockFunction],
      "venueSetPause": [MockFunction],
      "venueSetPhoto": [MockFunction],
      "venueSetSearch": [MockFunction],
      "venueSetStart": [MockFunction],
      "venueSetTime": [MockFunction],
      "venueToggleRange": [MockFunction],
      "venueToggleSort": [MockFunction],
    }
  }
  data={
    Object {
      "account": Object {
        "address": "",
        "avatar": "",
        "delete": false,
        "settings": false,
      },
      "errors": Array [],
      "loading": 0,
      "log": Array [],
      "notifications": Object {
        "friends": Array [],
        "rsvps": Array [],
      },
      "ready": false,
      "user": Object {},
      "users": Object {
        "data": Array [
          Object {
            "data": Object {
              "address": "",
              "app": "nightlife-app",
              "avatar": "",
              "blocks": Array [],
              "distance": 0,
              "favorites": Array [],
              "friends": Array [],
              "location": null,
            },
            "id": "",
            "name": "",
          },
        ],
        "list": Object {
          "range": false,
          "search": "",
        },
      },
      "venues": Object {
        "data": Array [],
        "list": Object {
          "range": false,
          "search": "",
          "sort": false,
        },
        "page": Object {
          "form": Object {
            "message": "",
            "open": false,
            "time": "",
          },
          "photos": Object {
            "pause": false,
            "photo": "",
            "start": false,
          },
        },
      },
    }
  }
  history={
    Object {
      "push": [MockFunction],
    }
  }
  local={
    Object {
      "heading": "Friend Requests",
      "refresh": [MockFunction],
      "type": "friend",
    }
  }
  location={Object {}}
  match={Object {}}
  staticContext={Object {}}
/>
`;

exports[`FriendList should match snapshot (default) 1`] = `
<MetaList
  actions={
    Object {
      "favoriteAdd": [MockFunction],
      "favoriteRemove": [MockFunction],
      "friendAdd": [MockFunction],
      "friendConfirm": [MockFunction],
      "friendDismiss": [MockFunction],
      "friendGetList": [MockFunction],
      "friendRemove": [MockFunction],
      "metaAddErrors": [MockFunction],
      "metaCloseError": [MockFunction],
      "metaGetUser": [MockFunction],
      "metaLogAction": [MockFunction],
      "metaNoOp": [MockFunction],
      "metaSaveAddress": [MockFunction],
      "metaSaveAvatar": [MockFunction],
      "metaSetAddress": [MockFunction],
      "metaSetAvatar": [MockFunction],
      "metaSetLoading": [MockFunction],
      "metaSetReady": [MockFunction],
      "metaSetState": [MockFunction],
      "metaTimeoutError": [MockFunction],
      "metaToggleDelete": [MockFunction],
      "metaToggleSettings": [MockFunction],
      "rsvpAdd": [MockFunction],
      "rsvpDismiss": [MockFunction],
      "rsvpGetList": [MockFunction],
      "rsvpRemove": [MockFunction],
      "userClearState": [MockFunction],
      "userGetItem": [MockFunction],
      "userGetList": [MockFunction],
      "userSetSearch": [MockFunction],
      "userToggleBlock": [MockFunction],
      "userToggleRange": [MockFunction],
      "venueClearForm": [MockFunction],
      "venueClearState": [MockFunction],
      "venueGetItem": [MockFunction],
      "venueGetList": [MockFunction],
      "venueSetMessage": [MockFunction],
      "venueSetOpen": [MockFunction],
      "venueSetPause": [MockFunction],
      "venueSetPhoto": [MockFunction],
      "venueSetSearch": [MockFunction],
      "venueSetStart": [MockFunction],
      "venueSetTime": [MockFunction],
      "venueToggleRange": [MockFunction],
      "venueToggleSort": [MockFunction],
    }
  }
  data={
    Object {
      "account": Object {
        "address": "",
        "avatar": "",
        "delete": false,
        "settings": false,
      },
      "errors": Array [],
      "loading": 0,
      "log": Array [],
      "notifications": Object {
        "friends": Array [],
        "rsvps": Array [],
      },
      "ready": false,
      "user": Object {},
      "users": Object {
        "data": Array [],
        "list": Object {
          "range": false,
          "search": "",
        },
      },
      "venues": Object {
        "data": Array [],
        "list": Object {
          "range": false,
          "search": "",
          "sort": false,
        },
        "page": Object {
          "form": Object {
            "message": "",
            "open": false,
            "time": "",
          },
          "photos": Object {
            "pause": false,
            "photo": "",
            "start": false,
          },
        },
      },
    }
  }
  history={
    Object {
      "push": [MockFunction],
    }
  }
  local={
    Object {
      "heading": "Friend Requests",
      "refresh": [MockFunction],
      "type": "friend",
    }
  }
  location={Object {}}
  match={Object {}}
  staticContext={Object {}}
/>
`;

exports[`FriendList should match snapshot (list) 1`] = `
<MetaList
  actions={
    Object {
      "favoriteAdd": [MockFunction],
      "favoriteRemove": [MockFunction],
      "friendAdd": [MockFunction],
      "friendConfirm": [MockFunction],
      "friendDismiss": [MockFunction],
      "friendGetList": [MockFunction],
      "friendRemove": [MockFunction],
      "metaAddErrors": [MockFunction],
      "metaCloseError": [MockFunction],
      "metaGetUser": [MockFunction],
      "metaLogAction": [MockFunction],
      "metaNoOp": [MockFunction],
      "metaSaveAddress": [MockFunction],
      "metaSaveAvatar": [MockFunction],
      "metaSetAddress": [MockFunction],
      "metaSetAvatar": [MockFunction],
      "metaSetLoading": [MockFunction],
      "metaSetReady": [MockFunction],
      "metaSetState": [MockFunction],
      "metaTimeoutError": [MockFunction],
      "metaToggleDelete": [MockFunction],
      "metaToggleSettings": [MockFunction],
      "rsvpAdd": [MockFunction],
      "rsvpDismiss": [MockFunction],
      "rsvpGetList": [MockFunction],
      "rsvpRemove": [MockFunction],
      "userClearState": [MockFunction],
      "userGetItem": [MockFunction],
      "userGetList": [MockFunction],
      "userSetSearch": [MockFunction],
      "userToggleBlock": [MockFunction],
      "userToggleRange": [MockFunction],
      "venueClearForm": [MockFunction],
      "venueClearState": [MockFunction],
      "venueGetItem": [MockFunction],
      "venueGetList": [MockFunction],
      "venueSetMessage": [MockFunction],
      "venueSetOpen": [MockFunction],
      "venueSetPause": [MockFunction],
      "venueSetPhoto": [MockFunction],
      "venueSetSearch": [MockFunction],
      "venueSetStart": [MockFunction],
      "venueSetTime": [MockFunction],
      "venueToggleRange": [MockFunction],
      "venueToggleSort": [MockFunction],
    }
  }
  data={
    Object {
      "account": Object {
        "address": "",
        "avatar": "",
        "delete": false,
        "settings": false,
      },
      "errors": Array [],
      "loading": 0,
      "log": Array [],
      "notifications": Object {
        "friends": Array [
          Object {
            "confirmed": false,
            "date": 0,
            "from": Object {
              "id": "",
              "name": "",
            },
            "hidden": Array [],
            "id": "",
            "to": Object {
              "id": "",
              "name": "",
            },
          },
        ],
        "rsvps": Array [],
      },
      "ready": false,
      "user": Object {},
      "users": Object {
        "data": Array [],
        "list": Object {
          "range": false,
          "search": "",
        },
      },
      "venues": Object {
        "data": Array [],
        "list": Object {
          "range": false,
          "search": "",
          "sort": false,
        },
        "page": Object {
          "form": Object {
            "message": "",
            "open": false,
            "time": "",
          },
          "photos": Object {
            "pause": false,
            "photo": "",
            "start": false,
          },
        },
      },
    }
  }
  history={
    Object {
      "push": [MockFunction],
    }
  }
  local={
    Object {
      "heading": "Friend Requests",
      "refresh": [MockFunction],
      "type": "friend",
    }
  }
  location={Object {}}
  match={Object {}}
  staticContext={Object {}}
>
  <FriendItem
    actions={
      Object {
        "favoriteAdd": [MockFunction],
        "favoriteRemove": [MockFunction],
        "friendAdd": [MockFunction],
        "friendConfirm": [MockFunction],
        "friendDismiss": [MockFunction],
        "friendGetList": [MockFunction],
        "friendRemove": [MockFunction],
        "metaAddErrors": [MockFunction],
        "metaCloseError": [MockFunction],
        "metaGetUser": [MockFunction],
        "metaLogAction": [MockFunction],
        "metaNoOp": [MockFunction],
        "metaSaveAddress": [MockFunction],
        "metaSaveAvatar": [MockFunction],
        "metaSetAddress": [MockFunction],
        "metaSetAvatar": [MockFunction],
        "metaSetLoading": [MockFunction],
        "metaSetReady": [MockFunction],
        "metaSetState": [MockFunction],
        "metaTimeoutError": [MockFunction],
        "metaToggleDelete": [MockFunction],
        "metaToggleSettings": [MockFunction],
        "rsvpAdd": [MockFunction],
        "rsvpDismiss": [MockFunction],
        "rsvpGetList": [MockFunction],
        "rsvpRemove": [MockFunction],
        "userClearState": [MockFunction],
        "userGetItem": [MockFunction],
        "userGetList": [MockFunction],
        "userSetSearch": [MockFunction],
        "userToggleBlock": [MockFunction],
        "userToggleRange": [MockFunction],
        "venueClearForm": [MockFunction],
        "venueClearState": [MockFunction],
        "venueGetItem": [MockFunction],
        "venueGetList": [MockFunction],
        "venueSetMessage": [MockFunction],
        "venueSetOpen": [MockFunction],
        "venueSetPause": [MockFunction],
        "venueSetPhoto": [MockFunction],
        "venueSetSearch": [MockFunction],
        "venueSetStart": [MockFunction],
        "venueSetTime": [MockFunction],
        "venueToggleRange": [MockFunction],
        "venueToggleSort": [MockFunction],
      }
    }
    data={
      Object {
        "account": Object {
          "address": "",
          "avatar": "",
          "delete": false,
          "settings": false,
        },
        "errors": Array [],
        "loading": 0,
        "log": Array [],
        "notifications": Object {
          "friends": Array [
            Object {
              "confirmed": false,
              "date": 0,
              "from": Object {
                "id": "",
                "name": "",
              },
              "hidden": Array [],
              "id": "",
              "to": Object {
                "id": "",
                "name": "",
              },
            },
          ],
          "rsvps": Array [],
        },
        "ready": false,
        "user": Object {},
        "users": Object {
          "data": Array [],
          "list": Object {
            "range": false,
            "search": "",
          },
        },
        "venues": Object {
          "data": Array [],
          "list": Object {
            "range": false,
            "search": "",
            "sort": false,
          },
          "page": Object {
            "form": Object {
              "message": "",
              "open": false,
              "time": "",
            },
            "photos": Object {
              "pause": false,
              "photo": "",
              "start": false,
            },
          },
        },
      }
    }
    history={
      Object {
        "push": [MockFunction],
      }
    }
    key="0-0"
    local={
      Object {
        "friend": Object {
          "confirmed": false,
          "date": 0,
          "from": Object {
            "id": "",
            "name": "",
          },
          "hidden": Array [],
          "id": "",
          "to": Object {
            "id": "",
            "name": "",
          },
        },
      }
    }
    location={Object {}}
    match={Object {}}
    staticContext={Object {}}
  />
</MetaList>
`;
