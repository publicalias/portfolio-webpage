// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`friend list should match snapshot (default) 1`] = `
<MetaList
  local={
    Object {
      "heading": "Friend Requests",
      "list": Array [],
      "refresh": [MockFunction],
      "type": "friend",
    }
  }
/>
`;

exports[`friend list should match snapshot (list) 1`] = `
<MetaList
  local={
    Object {
      "heading": "Friend Requests",
      "list": Array [
        <FriendItem
          actions={
            Object {
              "favoriteAdd": [MockFunction],
              "favoriteRemove": [MockFunction],
              "friendAdd": [MockFunction],
              "friendConfirm": [MockFunction],
              "friendDismiss": [MockFunction],
              "friendGetList": [MockFunction],
              "friendRemove": [MockFunction],
              "metaAddErrors": [MockFunction],
              "metaCloseError": [MockFunction],
              "metaGetUser": [MockFunction],
              "metaNoOp": [MockFunction],
              "metaSaveAddress": [MockFunction],
              "metaSaveAvatar": [MockFunction],
              "metaSetAddress": [MockFunction],
              "metaSetAvatar": [MockFunction],
              "metaSetLoading": [MockFunction],
              "metaSetState": [MockFunction],
              "metaTimeoutError": [MockFunction],
              "metaToggleDelete": [MockFunction],
              "metaToggleSettings": [MockFunction],
              "rsvpAdd": [MockFunction],
              "rsvpDismiss": [MockFunction],
              "rsvpGetList": [MockFunction],
              "rsvpRemove": [MockFunction],
              "userClearState": [MockFunction],
              "userGetItem": [MockFunction],
              "userGetList": [MockFunction],
              "userSetSearch": [MockFunction],
              "userToggleBlock": [MockFunction],
              "venueClearState": [MockFunction],
              "venueGetItem": [MockFunction],
              "venueGetList": [MockFunction],
              "venueSetMessage": [MockFunction],
              "venueSetSearch": [MockFunction],
              "venueSetTime": [MockFunction],
              "venueToggleForm": [MockFunction],
            }
          }
          data={
            Object {
              "account": Object {
                "address": "",
                "avatar": "",
                "delete": false,
                "settings": false,
              },
              "data": Object {
                "users": Array [],
                "venues": Array [],
              },
              "errors": Array [],
              "loading": false,
              "notifications": Object {
                "friends": Array [
                  Object {
                    "confirmed": false,
                    "date": 0,
                    "from": Object {
                      "id": "",
                      "name": "",
                    },
                    "hidden": Array [],
                    "id": "",
                    "to": Object {
                      "id": "",
                      "name": "",
                    },
                  },
                ],
                "rsvps": Array [],
              },
              "user": Object {},
              "users": Object {
                "list": Object {
                  "search": "",
                },
              },
              "venues": Object {
                "list": Object {
                  "search": "",
                },
                "page": Object {
                  "form": false,
                  "message": "",
                  "time": "",
                },
              },
            }
          }
          history={
            Object {
              "push": [MockFunction],
            }
          }
          local={
            Object {
              "friend": Object {
                "confirmed": false,
                "date": 0,
                "from": Object {
                  "id": "",
                  "name": "",
                },
                "hidden": Array [],
                "id": "",
                "to": Object {
                  "id": "",
                  "name": "",
                },
              },
            }
          }
          location={Object {}}
          match={Object {}}
          staticContext={Object {}}
        />,
      ],
      "refresh": [MockFunction],
      "type": "friend",
    }
  }
/>
`;
