// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`list should match snapshot (default) 1`] = `
<div
  className="c-rsvp-list"
>
  <div
    className="c-rsvp-list__head"
  >
    <h3>
      RSVPs
    </h3>
    <button
      className="c-rsvp-list__sync qa-sync-rsvp"
      onClick={[Function]}
    >
      <i
        className="fas fa-sync"
      />
    </button>
  </div>
  <hr />
  <div
    className="c-rsvp-list__body"
  >
    <p
      className="u-margin-none"
    >
      No notifications
    </p>
  </div>
</div>
`;

exports[`list should match snapshot (rsvps) 1`] = `
<div
  className="c-rsvp-list"
>
  <div
    className="c-rsvp-list__head"
  >
    <h3>
      RSVPs
    </h3>
    <button
      className="c-rsvp-list__sync qa-sync-rsvp"
      onClick={[Function]}
    >
      <i
        className="fas fa-sync"
      />
    </button>
  </div>
  <hr />
  <div
    className="c-rsvp-list__body"
  >
    <Item
      actions={
        Object {
          "favoriteAdd": [MockFunction],
          "favoriteRemove": [MockFunction],
          "friendAdd": [MockFunction],
          "friendConfirm": [MockFunction],
          "friendDismiss": [MockFunction],
          "friendGetList": [MockFunction],
          "friendRemove": [MockFunction],
          "metaAddErrors": [MockFunction],
          "metaCloseError": [MockFunction],
          "metaGetUser": [MockFunction],
          "metaNoOp": [MockFunction],
          "metaSaveAddress": [MockFunction],
          "metaSaveAvatar": [MockFunction],
          "metaSetAddress": [MockFunction],
          "metaSetAvatar": [MockFunction],
          "metaSetLoading": [MockFunction],
          "metaSetState": [MockFunction],
          "metaTimeoutError": [MockFunction],
          "metaToggleDelete": [MockFunction],
          "metaToggleSettings": [MockFunction],
          "rsvpAdd": [MockFunction],
          "rsvpDismiss": [MockFunction],
          "rsvpGetList": [MockFunction],
          "rsvpRemove": [MockFunction],
          "userClearState": [MockFunction],
          "userGetItem": [MockFunction],
          "userGetList": [MockFunction],
          "userSetSearch": [MockFunction],
          "userToggleBlock": [MockFunction],
          "venueClearState": [MockFunction],
          "venueGetItem": [MockFunction],
          "venueGetList": [MockFunction],
          "venueSetMessage": [MockFunction],
          "venueSetSearch": [MockFunction],
          "venueSetTime": [MockFunction],
          "venueToggleForm": [MockFunction],
        }
      }
      data={
        Object {
          "account": Object {
            "address": "",
            "avatar": "",
            "delete": false,
            "settings": false,
          },
          "data": Object {
            "users": Array [],
            "venues": Array [],
          },
          "errors": Array [],
          "loading": false,
          "notifications": Object {
            "friends": Array [],
            "rsvps": Array [
              Object {
                "date": 0,
                "hidden": Array [],
                "id": "",
                "message": "",
                "time": "",
                "user": Object {
                  "id": "",
                  "name": "",
                },
                "venue": Object {
                  "id": "",
                  "name": "",
                },
              },
            ],
          },
          "user": Object {},
          "users": Object {
            "list": Object {
              "search": "",
            },
          },
          "venues": Object {
            "list": Object {
              "search": "",
            },
            "page": Object {
              "form": false,
              "message": "",
              "time": "",
            },
          },
        }
      }
      history={
        Object {
          "push": [MockFunction],
        }
      }
      key="0-0"
      local={
        Object {
          "rsvp": Object {
            "date": 0,
            "hidden": Array [],
            "id": "",
            "message": "",
            "time": "",
            "user": Object {
              "id": "",
              "name": "",
            },
            "venue": Object {
              "id": "",
              "name": "",
            },
          },
        }
      }
      location={Object {}}
      match={Object {}}
      staticContext={Object {}}
    />
  </div>
</div>
`;
