// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Sidebar should match snapshot (authenticated) 1`] = `
<div
  className="c-sidebar"
>
  <h4
    className="u-align-left"
  >
    Hi, Anonymous!
  </h4>
  <hr />
  <div
    className="c-sidebar__buttons"
  >
    <button
      className="c-sidebar__toggle qa-toggle-settings"
      onClick={[Function]}
    >
      Settings
    </button>
    <AuthButtons
      actions={
        Object {
          "favoriteAdd": [MockFunction],
          "favoriteRemove": [MockFunction],
          "friendAdd": [MockFunction],
          "friendConfirm": [MockFunction],
          "friendDismiss": [MockFunction],
          "friendGetList": [MockFunction],
          "friendRemove": [MockFunction],
          "metaAddErrors": [MockFunction],
          "metaCloseError": [MockFunction],
          "metaGetUser": [MockFunction],
          "metaLogAction": [MockFunction],
          "metaNoOp": [MockFunction],
          "metaSaveAddress": [MockFunction],
          "metaSaveAvatar": [MockFunction],
          "metaSetAddress": [MockFunction],
          "metaSetAvatar": [MockFunction],
          "metaSetLoading": [MockFunction],
          "metaSetReady": [MockFunction],
          "metaSetState": [MockFunction],
          "metaTimeoutError": [MockFunction],
          "metaToggleDelete": [MockFunction],
          "metaToggleSettings": [MockFunction],
          "rsvpAdd": [MockFunction],
          "rsvpDismiss": [MockFunction],
          "rsvpGetList": [MockFunction],
          "rsvpRemove": [MockFunction],
          "userClearState": [MockFunction],
          "userGetItem": [MockFunction],
          "userGetList": [MockFunction],
          "userSetSearch": [MockFunction],
          "userToggleBlock": [MockFunction],
          "userToggleRange": [MockFunction],
          "venueClearForm": [MockFunction],
          "venueClearState": [MockFunction],
          "venueGetItem": [MockFunction],
          "venueGetList": [MockFunction],
          "venueSetMessage": [MockFunction],
          "venueSetOpen": [MockFunction],
          "venueSetPause": [MockFunction],
          "venueSetPhoto": [MockFunction],
          "venueSetSearch": [MockFunction],
          "venueSetStart": [MockFunction],
          "venueSetTime": [MockFunction],
          "venueToggleRange": [MockFunction],
          "venueToggleSort": [MockFunction],
        }
      }
      data={
        Object {
          "account": Object {
            "delete": false,
            "settings": Object {
              "address": "",
              "avatar": "",
              "open": false,
            },
          },
          "errors": Array [],
          "loading": 0,
          "log": Array [],
          "notifications": Object {
            "friends": Array [],
            "rsvps": Array [],
          },
          "ready": false,
          "user": Object {
            "auth": Object {
              "id": "",
              "provider": "",
            },
            "data": Object {
              "address": "",
              "app": "nightlife-app",
              "avatar": "",
              "blocks": Array [],
              "distance": 0,
              "favorites": Array [],
              "friends": Array [],
              "location": null,
              "restricted": false,
            },
            "id": "",
            "name": "",
            "type": "auth",
          },
          "users": Object {
            "list": Object {
              "data": Array [],
              "menu": Object {
                "range": false,
                "search": "",
              },
            },
            "page": Object {
              "data": Array [],
            },
          },
          "venues": Object {
            "list": Object {
              "data": Array [],
              "menu": Object {
                "range": false,
                "search": "",
                "sort": false,
              },
            },
            "page": Object {
              "body": Object {
                "pause": false,
                "photo": "",
                "start": false,
              },
              "data": Array [],
              "form": Object {
                "message": "",
                "open": false,
                "time": "",
              },
            },
          },
        }
      }
      history={
        Object {
          "push": [MockFunction],
        }
      }
      local={
        Object {
          "redirect": "/nightlife-app",
        }
      }
      location={Object {}}
      match={Object {}}
      staticContext={Object {}}
    />
  </div>
</div>
`;

exports[`Sidebar should match snapshot (default) 1`] = `
<div
  className="c-sidebar"
>
  <h4
    className="u-align-left"
  >
    Hi, Anonymous!
  </h4>
  <hr />
  <div
    className="c-sidebar__buttons"
  >
    <AuthButtons
      actions={
        Object {
          "favoriteAdd": [MockFunction],
          "favoriteRemove": [MockFunction],
          "friendAdd": [MockFunction],
          "friendConfirm": [MockFunction],
          "friendDismiss": [MockFunction],
          "friendGetList": [MockFunction],
          "friendRemove": [MockFunction],
          "metaAddErrors": [MockFunction],
          "metaCloseError": [MockFunction],
          "metaGetUser": [MockFunction],
          "metaLogAction": [MockFunction],
          "metaNoOp": [MockFunction],
          "metaSaveAddress": [MockFunction],
          "metaSaveAvatar": [MockFunction],
          "metaSetAddress": [MockFunction],
          "metaSetAvatar": [MockFunction],
          "metaSetLoading": [MockFunction],
          "metaSetReady": [MockFunction],
          "metaSetState": [MockFunction],
          "metaTimeoutError": [MockFunction],
          "metaToggleDelete": [MockFunction],
          "metaToggleSettings": [MockFunction],
          "rsvpAdd": [MockFunction],
          "rsvpDismiss": [MockFunction],
          "rsvpGetList": [MockFunction],
          "rsvpRemove": [MockFunction],
          "userClearState": [MockFunction],
          "userGetItem": [MockFunction],
          "userGetList": [MockFunction],
          "userSetSearch": [MockFunction],
          "userToggleBlock": [MockFunction],
          "userToggleRange": [MockFunction],
          "venueClearForm": [MockFunction],
          "venueClearState": [MockFunction],
          "venueGetItem": [MockFunction],
          "venueGetList": [MockFunction],
          "venueSetMessage": [MockFunction],
          "venueSetOpen": [MockFunction],
          "venueSetPause": [MockFunction],
          "venueSetPhoto": [MockFunction],
          "venueSetSearch": [MockFunction],
          "venueSetStart": [MockFunction],
          "venueSetTime": [MockFunction],
          "venueToggleRange": [MockFunction],
          "venueToggleSort": [MockFunction],
        }
      }
      data={
        Object {
          "account": Object {
            "delete": false,
            "settings": Object {
              "address": "",
              "avatar": "",
              "open": false,
            },
          },
          "errors": Array [],
          "loading": 0,
          "log": Array [],
          "notifications": Object {
            "friends": Array [],
            "rsvps": Array [],
          },
          "ready": false,
          "user": Object {},
          "users": Object {
            "list": Object {
              "data": Array [],
              "menu": Object {
                "range": false,
                "search": "",
              },
            },
            "page": Object {
              "data": Array [],
            },
          },
          "venues": Object {
            "list": Object {
              "data": Array [],
              "menu": Object {
                "range": false,
                "search": "",
                "sort": false,
              },
            },
            "page": Object {
              "body": Object {
                "pause": false,
                "photo": "",
                "start": false,
              },
              "data": Array [],
              "form": Object {
                "message": "",
                "open": false,
                "time": "",
              },
            },
          },
        }
      }
      history={
        Object {
          "push": [MockFunction],
        }
      }
      local={
        Object {
          "redirect": "/nightlife-app",
        }
      }
      location={Object {}}
      match={Object {}}
      staticContext={Object {}}
    />
  </div>
</div>
`;

exports[`Sidebar should match snapshot (name) 1`] = `
<div
  className="c-sidebar"
>
  <h4
    className="u-align-left"
  >
    Hi, User A!
  </h4>
  <hr />
  <div
    className="c-sidebar__buttons"
  >
    <button
      className="c-sidebar__toggle qa-toggle-settings"
      onClick={[Function]}
    >
      Settings
    </button>
    <AuthButtons
      actions={
        Object {
          "favoriteAdd": [MockFunction],
          "favoriteRemove": [MockFunction],
          "friendAdd": [MockFunction],
          "friendConfirm": [MockFunction],
          "friendDismiss": [MockFunction],
          "friendGetList": [MockFunction],
          "friendRemove": [MockFunction],
          "metaAddErrors": [MockFunction],
          "metaCloseError": [MockFunction],
          "metaGetUser": [MockFunction],
          "metaLogAction": [MockFunction],
          "metaNoOp": [MockFunction],
          "metaSaveAddress": [MockFunction],
          "metaSaveAvatar": [MockFunction],
          "metaSetAddress": [MockFunction],
          "metaSetAvatar": [MockFunction],
          "metaSetLoading": [MockFunction],
          "metaSetReady": [MockFunction],
          "metaSetState": [MockFunction],
          "metaTimeoutError": [MockFunction],
          "metaToggleDelete": [MockFunction],
          "metaToggleSettings": [MockFunction],
          "rsvpAdd": [MockFunction],
          "rsvpDismiss": [MockFunction],
          "rsvpGetList": [MockFunction],
          "rsvpRemove": [MockFunction],
          "userClearState": [MockFunction],
          "userGetItem": [MockFunction],
          "userGetList": [MockFunction],
          "userSetSearch": [MockFunction],
          "userToggleBlock": [MockFunction],
          "userToggleRange": [MockFunction],
          "venueClearForm": [MockFunction],
          "venueClearState": [MockFunction],
          "venueGetItem": [MockFunction],
          "venueGetList": [MockFunction],
          "venueSetMessage": [MockFunction],
          "venueSetOpen": [MockFunction],
          "venueSetPause": [MockFunction],
          "venueSetPhoto": [MockFunction],
          "venueSetSearch": [MockFunction],
          "venueSetStart": [MockFunction],
          "venueSetTime": [MockFunction],
          "venueToggleRange": [MockFunction],
          "venueToggleSort": [MockFunction],
        }
      }
      data={
        Object {
          "account": Object {
            "delete": false,
            "settings": Object {
              "address": "",
              "avatar": "",
              "open": false,
            },
          },
          "errors": Array [],
          "loading": 0,
          "log": Array [],
          "notifications": Object {
            "friends": Array [],
            "rsvps": Array [],
          },
          "ready": false,
          "user": Object {
            "auth": Object {
              "id": "",
              "provider": "",
            },
            "data": Object {
              "address": "",
              "app": "nightlife-app",
              "avatar": "",
              "blocks": Array [],
              "distance": 0,
              "favorites": Array [],
              "friends": Array [],
              "location": null,
              "restricted": false,
            },
            "id": "",
            "name": "User A",
            "type": "auth",
          },
          "users": Object {
            "list": Object {
              "data": Array [],
              "menu": Object {
                "range": false,
                "search": "",
              },
            },
            "page": Object {
              "data": Array [],
            },
          },
          "venues": Object {
            "list": Object {
              "data": Array [],
              "menu": Object {
                "range": false,
                "search": "",
                "sort": false,
              },
            },
            "page": Object {
              "body": Object {
                "pause": false,
                "photo": "",
                "start": false,
              },
              "data": Array [],
              "form": Object {
                "message": "",
                "open": false,
                "time": "",
              },
            },
          },
        }
      }
      history={
        Object {
          "push": [MockFunction],
        }
      }
      local={
        Object {
          "redirect": "/nightlife-app",
        }
      }
      location={Object {}}
      match={Object {}}
      staticContext={Object {}}
    />
  </div>
</div>
`;

exports[`Sidebar should match snapshot (settings) 1`] = `
<div
  className="c-sidebar"
>
  <h4
    className="u-align-left"
  >
    Hi, Anonymous!
  </h4>
  <hr />
  <div
    className="c-sidebar__buttons"
  >
    <button
      className="c-sidebar__toggle qa-toggle-settings"
      onClick={[Function]}
    >
      Settings
    </button>
    <p
      className="u-margin-none"
    >
      Tip: Set your address to "DEMO" to interact with the demo users.
    </p>
    <SidebarInput
      local={
        Object {
          "actions": Object {
            "change": [MockFunction],
            "submit": [MockFunction],
          },
          "bool": "",
          "placeholder": "Address",
          "text": "",
        }
      }
    />
    <SidebarInput
      local={
        Object {
          "actions": Object {
            "change": [MockFunction],
            "submit": [MockFunction],
          },
          "bool": "",
          "placeholder": "Avatar",
          "text": "",
        }
      }
    />
    <AuthButtons
      actions={
        Object {
          "favoriteAdd": [MockFunction],
          "favoriteRemove": [MockFunction],
          "friendAdd": [MockFunction],
          "friendConfirm": [MockFunction],
          "friendDismiss": [MockFunction],
          "friendGetList": [MockFunction],
          "friendRemove": [MockFunction],
          "metaAddErrors": [MockFunction],
          "metaCloseError": [MockFunction],
          "metaGetUser": [MockFunction],
          "metaLogAction": [MockFunction],
          "metaNoOp": [MockFunction],
          "metaSaveAddress": [MockFunction],
          "metaSaveAvatar": [MockFunction],
          "metaSetAddress": [MockFunction],
          "metaSetAvatar": [MockFunction],
          "metaSetLoading": [MockFunction],
          "metaSetReady": [MockFunction],
          "metaSetState": [MockFunction],
          "metaTimeoutError": [MockFunction],
          "metaToggleDelete": [MockFunction],
          "metaToggleSettings": [MockFunction],
          "rsvpAdd": [MockFunction],
          "rsvpDismiss": [MockFunction],
          "rsvpGetList": [MockFunction],
          "rsvpRemove": [MockFunction],
          "userClearState": [MockFunction],
          "userGetItem": [MockFunction],
          "userGetList": [MockFunction],
          "userSetSearch": [MockFunction],
          "userToggleBlock": [MockFunction],
          "userToggleRange": [MockFunction],
          "venueClearForm": [MockFunction],
          "venueClearState": [MockFunction],
          "venueGetItem": [MockFunction],
          "venueGetList": [MockFunction],
          "venueSetMessage": [MockFunction],
          "venueSetOpen": [MockFunction],
          "venueSetPause": [MockFunction],
          "venueSetPhoto": [MockFunction],
          "venueSetSearch": [MockFunction],
          "venueSetStart": [MockFunction],
          "venueSetTime": [MockFunction],
          "venueToggleRange": [MockFunction],
          "venueToggleSort": [MockFunction],
        }
      }
      data={
        Object {
          "account": Object {
            "delete": false,
            "settings": Object {
              "address": "",
              "avatar": "",
              "open": true,
            },
          },
          "errors": Array [],
          "loading": 0,
          "log": Array [],
          "notifications": Object {
            "friends": Array [],
            "rsvps": Array [],
          },
          "ready": false,
          "user": Object {
            "auth": Object {
              "id": "",
              "provider": "",
            },
            "data": Object {
              "address": "",
              "app": "nightlife-app",
              "avatar": "",
              "blocks": Array [],
              "distance": 0,
              "favorites": Array [],
              "friends": Array [],
              "location": null,
              "restricted": false,
            },
            "id": "",
            "name": "",
            "type": "auth",
          },
          "users": Object {
            "list": Object {
              "data": Array [],
              "menu": Object {
                "range": false,
                "search": "",
              },
            },
            "page": Object {
              "data": Array [],
            },
          },
          "venues": Object {
            "list": Object {
              "data": Array [],
              "menu": Object {
                "range": false,
                "search": "",
                "sort": false,
              },
            },
            "page": Object {
              "body": Object {
                "pause": false,
                "photo": "",
                "start": false,
              },
              "data": Array [],
              "form": Object {
                "message": "",
                "open": false,
                "time": "",
              },
            },
          },
        }
      }
      history={
        Object {
          "push": [MockFunction],
        }
      }
      local={
        Object {
          "redirect": "/nightlife-app",
        }
      }
      location={Object {}}
      match={Object {}}
      staticContext={Object {}}
    />
  </div>
</div>
`;
